Domain 2 - Design performant Architecture

1. choose performant storage and DB
2. Apply caching to improve performance
3. Design solution for scalability and elasticity

EBS --> SSD is better performant for random accessing data while HDD is better performant for sequncial accessing of data.
All Static content should be moved to S3 to improve web tier application performance. Hence, web-server can only be working for dynamic contents.

S3 bucket can be access in 2 ways -->
virual hosted based URL --> http://bucket.s3.amazonaws.com or http://bucket.s3-aws-region.amazonaws.com
S3 buckets are globally unique and region specific
S3 cost calculated based on --> Storage {GB per month}, transfer out of S3, PUT/COPY/GET/POST requests
S3 - Free of charge --> Transfer into S3, transfer out from S3 to cloudFront or the same region

Object can be access by this URL -->
http://s3-aws-region.amazonaws.com/[bucket name]/[object name]

Performant storage on DB --> 
3 options --> RDS (OLTP), DynamoDB (NoSQL), RedShift (OLAP)

RDS --> not scale more then master copy. Only one copy for transactions. (Stand by can be set up for high availability).
RDS can support read replicas.
for high RDS performance use powerful EC2 instances

Caching -->
Cloudfront - Edge Location -->

Elastic Cache --> best for caching
2 ways --> 
Redis --> support for Data structures, persistent, atomic operations, pub/sub messaging, read replicas/ failover, cluster mode / sharded cluster 
MemcacheD --> Multi-threading, low maintainance, easy horizonatal scalability with auto discovery

*** There will be a question in exam to check when should you scale vertically vs horizontally.
Vertical Scaling --> (scaling up or down) --> when you replace smaller instances with larger instances (more CPU, memory)
Horizonatal scaling --> (scaling in or out) --> change in the number of instances (add or remove instance as per need)

Auto scaling --> helps in scale system automatically. Launch or terminate instance as per need. 
automatically registers new instances with load balancer.

What is the template that auto scaling uses to launch a fully configured instance automatically?
Answer: Launch configuration (contains all information related to EC2, like AMI ID, instance type-size, key-pair, user-data)

Auto Scaling group --> reference to launch config, specify the min, max and desired size of auto scaling group
may reference an ELB, health check type, 

Auto scaling policy --> specify how much to scale in ot out, (one or more policy may be attached to auto scaling group)
CloudWatch is used to determine when to scale out or in.




SNS Essentials --> its fully managed message notification service (Simple Notification Service)
  its a Pub-Sub service for messaging (Publish your topic - Subscribe to topic)
  SNS coordinates and manages the sending and delivery of messages to specific end-point
  easily intergrates with AWS services and events
  A full-environment monitoring solution can be created with SNS and CloudWatch to get different alerts / notifications.
  SNS guaratees that each message is delivered to SQS at-least-once.
  
SNS benefits --> scalable and highly reliable and can be used through Console, CLI, SDK, APIs

SNS components --> 
Topics --> Object to which you publish your message (message must be <= 256 KB)
How you label and group different endpoints that you send messages to.
group of subscriptions that you send a message to 
  Topics names should be unique within account and limited to 256 charachter only.
  allows alphanumeric charachters, hyphen, and underscore
  topics and messages are stored redundently to multiple servers and data centers.  
  subscribers subscribe to topic to receive messages
  (receive message from publisher --> push to subscriber)

subscriber (consumer) --> an endpoint that a message is sent to, like Http, Https, Lambda, Email, SQS, Email-JSON, SMS, mobile Apps
--> there is a soft limit of 10 million subscribers per topic 

subscription --> The endpoints that a topic sends message to
you attach ARN of your topic, type of subscriber (Email, SMS, etc) and value for that subscriber.
A valid subscription request remain pending for upto 3 days, token included in the confirmation message sent to SNS endpoints.

publisher (producer) --> An entity (human/ alarm/ event) that gives SNS a message that needs to be sent. 

Message --> (<= 256 KB) JSON formated Key-value pair, 
  allows developer to grab message data and parse it
  POST to end-point (HTTPs) with Specific header info. Header content can be used for verification and authenticity.
  message content depends on subscribers
  since a message is limited to 256KB, consider SES for sending bulk email

SNS Message body -->
  message --> this is the actual message value that will be send when notification was published 
  messageID --> A universally unique ID (UUID), same ID can be used for retries
  signature --> Base64-Encoded value signature of the message
  signatureVersion --> version of AWS SNS signature used
  SigningCertURL --> The URL to the certification used to sign the message
  Subject --> subject for your message
  timeStamp --> GMT time when the notification was published
  TopicARN --> An ARN for the topic that this message was published to
  Type --> type of message (Notifications are type Notification)
  Unsubscribed URL --> URL to unsubscribe from SNS message
  
SNS message attributes {Name, type, and value} --> message attributes are optional but sent along with message body.
    each message can have upto 10 attributes
    These attributes are helpful for receiver application to handle messages properly inorder to process them
    each message attributes needs a Name, type, and value must not be null or empty. Sent along with the message which also must not be null or empty. (total size must be <= 256kb including all attributes)
    Useful for SQS and mobile push notifications
    
https://docs.aws.amazon.com/sns/latest/dg/SNSMessageAttributes.html

SNS Access control policies --> can be used to grant access to SNS topic to another AWS account
  example:- SNS API: AddPermission --> requires topic, AWS Account ID, Actions and Labels
        Automatically generates an access control policy to SNS
  These policies can also be used to grant access to some AWS services to public to your SNS topic (although, many service like EC2 or Lambda will use IAM Role instead for SNS)
  IAM role and Access control policies can be used at the same time.

SNS Mobile Push --> Ability to send notifications directly to apps on mobile devices
  these are like message alerts, badge updates, or sounds alerts
Various app providers has various Mobile Push Notification Services available:  
    Amazon Device Messaging (ADM)
    Apple Push Notification Service
    Google Cloud Messaging for Android 

This is because SNS requires 'device token' or 'registration ID' to send messages to devices.

*** imp for exam **
SNS API Actions --> Below are few commonly used APIs for SNS
https://docs.aws.amazon.com/sns/latest/api/API_Operations.html
    CreateTopic --> this API call Creates a topic to which notifications can be published. 
    Publish --> Sends a message to an Amazon SNS topic or sends a text message (SMS message) directly to a phone number.
    Subscribe --> Prepares to subscribe an endpoint by sending the endpoint a confirmation message.
    Unsubscribe --> Deletes a subscription. 

Need to read few common errors as well -->
https://docs.aws.amazon.com/sns/latest/api/CommonErrors.html

good features --> sigma scripts
14-may --> (am) --> IAM and EC2 , (pm) VPC
15-may --> (am) --> lambda, server based compute services , (pm) S3
16-may --> (am) --> S3 remaining and DynamoDB, (pm) other AWS DB services
17-may --> (am) --> SNS, SQS, SWF , (pm) step functions, API gateways
18-may --> all remaining
19-may --> revision
20-may --> exams

Account and Services layer --> how you create, access and manage aws account and its services.
Root User --> full account access. Not recommanded for daily use puporse. (email address and password)

Physical and Networking Layer --> all about how aws is organized and how internal and external communication with aws works.
where aws resources are physically located around the world and how data flows through aws network.

Hybrid Environment --> allows user to combine on-premises resources with AWS resource and use it as they are in same environment.

Regions, AZ, Edge Locations -->
Edge Location --> (not inside AWS region), but its an AWS data center, Used to cache content closest to customer location to deliver content fast, if request is coming from other side of the geographical location. example, Cloudfront used for caching objects, etc.
Regions --> Geographical location, consist of atleast two or more AZ. (group of AZs)
AZ --> group of Data Centers, provides foudation for high availability and Fault tolerance for AWS resources. low latency network between AZs.

Shared Responsibility Model -->
  AWS Responsibility -->
  >> Physical server level and below
  >> physical env security and protection (firewall/power/climate/management)
  >> storage device decomissioning as per industry standards
  >> personnel security
  >> Network Device security and ACL
  >> AWS API endpoints - SSL
  >> DDOS protection
  >> EC2 instances and spoofing protection (Ingress / Egress filtering)
  >> EC2 instances hypervisor isolation (instances on the same physical device are still independent, shared physical device between instances)
  
  Customer Responsibility -->
  >> IAM
  >> MFA
  >> Password/ Key Rotation
  >> Access Advisor
  >> Trusted Advisor
  >> security groups
  >> Resource based policies
  >> ACL
  >> VPC
  >> Port scanning is against the rules even on your own environment (ask AWS if needed)
  >> OS level patches

Some responsibility differs based on services -->
  AWS Lambda -->  Generally, OS patches are customer responsibilty
      Although, AWS Lambda is fully-managed service that lets AWS handle responsibility for OS operations as well.

AWS Compute Overview -->
  EC2 --> Virtual server based service
  Lambda --> Serverless based service
  ECS --> Elastic container based service
  Elastic BeanStalk --> PAAS

AWS Storage Overview -->
  S3 --> Object based stirage
  Glacier --> Archive object based storage
  DataBase services -->
    DynamoDB --> serverless NoSQL DB
    RDS --> mully-managed SQL DBs
    Elastic Cache --> In-memory Cache Engine
    Redshift --> PetaBytes managed DW

IAM (Identity and Access management) --   
IAM Essentials --> Global service, AWS access control service
  core components --> Users, groups, roles, policies, API Keys, password policy and MFA
  IAM provides access and access permission to AWS resources (like EC2, S3 etc)
  Best Practice --> always follow "Principle of Least Priviledge"

IAM Policies -->
  A policy is a document that formally states one or more permissions.
  By default, an explicit deny overrides an explicit allow.
  Few category:
    Admin Access: full access to AWS resource
    power user access: admin access but not allowed user/group management
    Read Only access: only view inside of AWS resource
  Policies can't directly be attached to AWS resources (Such as an EC2) 

IAM Users -->
  By Default, all IAM users has non-explicit deny policy means NO access to any AWS services.
  But if you attach allow access policy for any AWS services to a specific USER and also attach deny policy for any AWS services to the       same user, then this explicit deny policy always overrides explicit allow policy.
  Each user will receive unique access Key ID and Secrete access key (credentials), that must not be shared or pass to EC2 directly
IAM Groups -->
  multiple policies can be assigned to multiple users at a time
IAM Roles -->
  A role is something another entity can assume and acquires specific permissions defined by roles
  Here, entity mean AWS resources (such as EC2) or Non-AWS account holder who may need temp access to AWS (using AD, SSO - (fb, google) etc)
  role is better way to attach policy to AWS resources
    example:- an EC2 instnace requires access to S3 buckets
  you can now change or assign role that is assigned to EC2 instances.
  An EC2 instance can have only ONE role attached at a time.
  Roles are useful for "Cross Account" access
  
IAM STS --> Security Token Service
  STS allows to create temporary security credential to access AWS resources.
  for short term use, from few min to few hours
  Once expired, can't reuse. Need to create new.
  when an API call requested, credentials are returned with 3 components: (Security token, access key ID , secrete access key)
  
  STS Benefits --> 
    No distributing or embedding long term AWS credentials into applications
    Grant access to AWS with IAM identity/user. (but with IAM roles and identity federation)
  When to Use STS -->
    1. Identity Federation
      a) Enterprise Identity Federation (using Microsoft Windows AD, etc). STS supports SAML (Security Assertion Markup Language)
      b) Web-identity Federation (using FB, google, amazon)
    2. Roles for Cross Account Access (Cross Origin Resource Sharing)
    3. Roles for AWS EC2 or other Services (such as EC2 to access S3 or other services)
  
  STS API Calls -->
    AssumeRole --> Cross account delegation and federation through a custom identity broker
    AssumeRoleWithWebIdentity --> Federation through a web based Identity provider
    AssumeRoleWithSAML --> Federation through an Enterprise Identity Provider compatible with SAML
    GetFederationToken --> Federation through a custom identity broker
    GetSessionToken --> Temporary credentials for users in untrusted environment
 
 IAM API Keys -->
  API Keys are useful to make programmatic calls to AWS, using CLI, SDKs, or Direct Http calls. (example, an API credentials are used by developers working from an on-premises network.
  Facts --> An API key is only available at the time of creation of user, if user forget later, they have to regenerate new key.
    AWS won't generate same set of key again, and can have only one active API key at a time.
    Every API key must be associated with one specific user.
    Roles doesn't have API key credentials.
    AWS consol will show you only Access key ID and never the secrete key ID.
    Never store these Key on EC2 instances.

IAM KMS (Key Management Service) --> Create and control encryption keys used to encrypt user data
  Customer Master Keys (CMK) --> used to encrypt/decrypt 4KB of data and primary resource of KMS
  2 types of KMS --> 
    Customer Managed --> customer create, enable/disable, rotate and manage the policies that allow access to CMKs
    AWS Managed --> created, managed and used by AWS, integrates with KMS
  Data Keys --> 
    Encryption keys for encyption of data
    CMKs can generate, encrypt and decrept data keys
    KMS doesn't use Data Keys to encrypt data, hence KMS doesn't manage or store data keys
  Envolope Encryption -->
    PlainText data is encrypted using data key
    Data Keys are encrypted with KEK (Key encryption key)
    KEK may be enrypted by another KEK, but eventually there will be one master key that can be used to decrypt 
 KMS API actions -->
  Encrypt --> encrypts plaintext using CMK
  GenerateDataKey --> uses a CMK to return a plainText, and cipherText version of data encryption key
  Decrypt --> Decrypt cipherText that are encrypted by API 
    Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext
  
    
Amazon Congnito -->
  Superset of wbe-Identity Federation
  --> create uniue indentity for application users from Google, fb
  --> supports unauthenticated identity (signup after application usage)
  --> save mobile user data
  --> can sync user data cross devices, mobile and web
  --> cache data locally at client
  
  
ARN (Amazon Resource Name) --> Is used to identify amazon resources across different region within an account.
  example --> arn:aws:iam::575876987:user/admin
  means --> arn:aws:service-name:region_name(optional):account_number:aws_resource_type_name/user_name

AWS overview Quiz notes -->
  1. AZs --> atleast more than 2 in a region, geographically seperated inside a region to help protect against disaster affecting more than one place at a time
  2. Need to understand locatin of Edge Location and AWS Regional Endpoint
  3. AWS access --> SDK, CLI, Consol
  4. IAM is global
  5. Region contains --> AZs, Data Centers, AWS services. Doesn't contain --> Edge Location

IAM quiz notes --->
  API access keys are required to make programmatic calls to AWS using AWS CLI, Windows PowerShell, and Direct HTTP call using the API
  IAM policy doc at min contains, Effects, resources, actions.
  
  

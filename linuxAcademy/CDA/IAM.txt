IAM (Identity and Access management) --   
IAM Essentials --> Global service, AWS access control service
  core components --> Users, groups, roles, policies, API Keys, password policy and MFA
  IAM provides access and access permission to AWS resources (like EC2, S3 etc)
  Best Practice --> always follow "Principle of Least Priviledge"

As per AWS Documentation --> 
  --> Different type of security credentials needed depending on how you interact -->
    --> username/password --> while login through console
    --> access keys to make programmatic call to AWS API operations (access key id, secrete access key, session token)
    
IAM Policies -->
  A policy is a document that formally states one or more permissions.
  By default, an explicit deny overrides an explicit allow.
  Few category:
    Admin Access: full access to AWS resource
    power user access: admin access but not allowed user/group management
    Read Only access: only view inside of AWS resource
  Policies can't directly be attached to AWS resources (Such as an EC2) 

IAM Users -->
  By Default, all IAM users has non-explicit deny policy means NO access to any AWS services.
  But if you attach allow access policy for any AWS services to a specific USER and also attach deny policy for any AWS services to the       same user, then this explicit deny policy always overrides explicit allow policy.
  Each user will receive unique access Key ID and Secrete access key (credentials), that must not be shared or pass to EC2 directly

IAM Groups -->
  multiple policies can be assigned to multiple users at a time

IAM Roles -->
  A role is something another entity can assume and acquires specific permissions defined by roles
  Here, entity mean AWS resources (such as EC2) or Non-AWS account holder who may need temp access to AWS (using AD, SSO - (fb, google) etc)
  role is better way to attach policy to AWS resources
    example:- an EC2 instnace requires access to S3 buckets
  you can now change or assign role that is assigned to EC2 instances.
  An EC2 instance can have only ONE role attached at a time.
  Roles are useful for "Cross Account" access

Using Instance Profiles --> (for role)
    --> An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance starts.
    --> when you create a role for Amazon EC2 using consol, the console automatically creates an instance profile and gives it the same name as the role. 
    --> In the console, the list that's displayed is actually a list of instance profile names. which we attach to instnaces and not the role.
    --> using AWS CLI or the AWS API, you create roles and instance profiles as separate actions. 
    --> An instance profile can contain only one IAM role, although a role can be included in multiple instance profiles. This limit of one role per instance profile cannot be increased. 
    few CLI examples:-
        Create an instance profile: aws iam create-instance-profile
        Add a role to an instance profile: aws iam add-role-to-instance-profile
        List instance profiles: aws iam list-instance-profiles, aws iam list-instance-profiles-for-role

IAM STS --> Security Token Service
  STS allows to create temporary security credential to access AWS resources.
  for short term use, from few min to few hours
  Once expired, can't reuse. Need to create new.
  when an API call requested, credentials are returned with 3 components: (Security token, access key ID , secrete access key)
  
  STS Benefits --> 
    No distributing or embedding long term AWS credentials into applications
    Grant access to AWS with IAM identity/user. (but with IAM roles and identity federation)
  When to Use STS -->
    1. Identity Federation
      a) Enterprise Identity Federation (using Microsoft Windows AD, etc). STS supports SAML (Security Assertion Markup Language)
      b) Web-identity Federation (using FB, google, amazon)
    2. Roles for Cross Account Access (Cross Origin Resource Sharing)
    3. Roles for AWS EC2 or other Services (such as EC2 to access S3 or other services)
  
  STS API Calls -->
    AssumeRole --> Cross account delegation and federation through a custom identity broker
    AssumeRoleWithWebIdentity --> Federation through a web based Identity provider
    AssumeRoleWithSAML --> Federation through an Enterprise Identity Provider compatible with SAML
    GetFederationToken --> Federation through a custom identity broker
    GetSessionToken --> Temporary credentials for users in untrusted environment
 
Some of the aspects that gets incorporated in the call to STS are -->
    --> The Amazon Resource Name (ARN) of the role that the app should assume.
    --> The token that the app gets from the IdP after the app authenticates the user.
    --> The duration, which specifies the duration of the temporary security credentials.
    --> A role session name, which is a string value that you can use to identify the session. This value can be captured and logged by CloudTrail to help you distinguish between your role users during an audit.
    
Cloudwatch vs CloudTrail with STS -->
CloudTrail logs all authenticated API requests (made with credentials) to IAM and AWS STS APIs (with temp credentials), with the exception of DecodeAuthorizationMessage. CloudTrail also logs non-authenticated requests.

CloudWatch --> has details as per matrics, means how many requests, errors, throttled, 

IAM API Keys -->
  API Keys are useful to make programmatic calls to AWS, using CLI, SDKs, or Direct Http calls. (example, an API credentials are used by developers working from an on-premises network.
  Facts --> An API key is only available at the time of creation of user, if user forget later, they have to regenerate new key.
    AWS won't generate same set of key again, and can have only one active API key at a time.
    Every API key must be associated with one specific user.
    Roles doesn't have API key credentials.
    AWS consol will show you only Access key ID and never the secrete key ID.
    Never store these Key on EC2 instances.

IAM KMS (Key Management Service) --> Create and control encryption keys used to encrypt user data
  Customer Master Keys (CMK) --> used to encrypt/decrypt 4KB of data and primary resource of KMS
  2 types of KMS --> 
    Customer Managed --> customer create, enable/disable, rotate and manage the policies that allow access to CMKs
    AWS Managed --> created, managed and used by AWS, integrates with KMS
  Data Keys --> 
    Encryption keys for encyption of data
    CMKs can generate, encrypt and decrept data keys
    KMS doesn't use Data Keys to encrypt data, hence KMS doesn't manage or store data keys
  Envolope Encryption -->
    PlainText data is encrypted using data key
    Data Keys are encrypted with KEK (Key encryption key)
    KEK may be enrypted by another KEK, but eventually there will be one master key that can be used to decrypt 
 KMS API actions -->
  Encrypt --> encrypts plaintext using CMK
  GenerateDataKey --> uses a CMK to return a plainText, and cipherText version of data encryption key
  Decrypt --> Decrypt cipherText that are encrypted by API 
    Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext
 
Testing IAM custom Policies with the IAM Policy Simulator --> 
policy simulator command typically require calling API operation to do two things -->
  --> Get context-keys first
  --> use the aws iam simulate-custom-policy command. In this command we need to supply list of actions, resources and context keys.
      
Amazon Congnito -->
  Superset of wbe-Identity Federation
  --> create uniue indentity for application users from Google, fb
  --> supports unauthenticated identity (signup after application usage)
  --> save mobile user data
  --> can sync user data cross devices, mobile and web
  --> cache data locally at client
   
ARN (Amazon Resource Name) --> Is used to identify amazon resources across different region within an account.
  example --> arn:aws:iam::575876987:user/admin
  means --> arn:aws:service-name:region_name(optional):account_number:aws_resource_type_name/user_name

AWS overview Quiz notes -->
  1. AZs --> atleast more than 2 in a region, geographically seperated inside a region to help protect against disaster affecting more than one place at a time
  2. Need to understand locatin of Edge Location and AWS Regional Endpoint
  3. AWS access --> SDK, CLI, Consol
  4. IAM is global
  5. Region contains --> AZs, Data Centers, AWS services. Doesn't contain --> Edge Location

IAM quiz notes --->
  API access keys are required to make programmatic calls to AWS using AWS CLI, Windows PowerShell, and Direct HTTP call using the API
  IAM policy doc at min contains, Effects, resources, actions.
  
** AWS policy statement and explanation -->
"Condition":{"Null":{"aws:TokenIssueTime":"true"}}
--> Use a Null condition operator to check if a condition key is present at the time of authorization. In the policy statement, use either true (the key doesn't exist â€” it is null) or false (the key exists and its value is not null).

*** IAM Group - you can attach only IAM users to the group. You cannot have nested groups. You can attach permissions directly at IAM User level; however it will result in too much maintenance. You can use identity federation using Active Directory integration. However, you still need to translate this AWS permissions. Logical choice is to simply create three managed policies with required permissions and then attach to a group named Department. Add IAM users to the department group


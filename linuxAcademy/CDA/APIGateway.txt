APIGateway Essentials -->
  fully managed service to create and manage your own API for your application
  "act-as" a front door for application, allowing access to data/logic/functionality from your back-end service.
  build RESTFul web APIs with: resources, methods (GET, DELETE, POST, PUT), Settings
  Deploy APIs to different stages/environments (dev, staging, prod). Each stage can have their own environment settings (like, throtteling, caching, metering and logging)
  API versioning, can clone API from previous versions and create a new version from it
  Rollback to previous API deployments
  custom Domain name can be pointed to APIs
  CloudWatch can be used to monitor and manage API keys, logs, 
  set throttling rules based on number of request per sec (eg: for http request)
  security through signature v.4 to sign and authorize API calls (temporary credentials generated through cognito or STS)
 
Benefits -->  (using CloudFront)
  Ability to cache API responses (Edge Locations)
  DDos (Distributed Denial of Service) protection via CloudFront
  CloudFront Edge Location become entry point for your API into your back-end
  hence, it can reduced latency and improved projection
  SDK generation for iOS, Android, etc
  support SWAGGER (very popular framework of API)
  Request/Response data transformation (JSON IN to XML out)
 
API Gateway Resources -->
  Resources are logical entities that can be access via resource path or URL
  Resources can have child resource and with different API URL
  Both resources and child resources can have associated HTTP method
  example API resource URLs --> https://16gkh57hj686.execute-api.us-east-1.amazonapi.com/dev/cars
  above "dev" in the URL consider as "stage" name for API

API Gateway Method --> 
  HTTP methods (GET, PUT, POST, DELETE) associated with API Gateway
  AWS also offer "ANY" method as-a-catch-all method option
  method response can be configured in varity of ways:-
    1. Lambda function, passed as a lambda event
    2. Http response to another Http endpoint
    3. Integration with other AWS services

API Gateway Deployment and Stages -->  
  Deployments --> are snapshots of API resources and methods, must be created and associated with stage
  stages --> are references to lifecycle status (dev, staging, prod) using stage variables.
     few stage settings can be configured:- like, Enable caching, customize request throttling, configure logging, define stage variables
     stage variables are name-value pairs that can be configured to associate with the deployment stage of API, act as environment variables. You can use stage variables in your API configuration to parametrize the integration of a request. Stage variables are also available in the $context object of the mapping templates.

API Gateway Caching and monitoring -->
  cache API responses for delivery fast request/response
  we can configure cache key and TTL for API responses
  caching can be set-up on a per API or per stage basis
  Monitoring can be done by cloudWatch
  
API Gateway Monitoring --> CloudWatch can be used to monitor activity and usage
    monitoring can be done at API or stage level
    throttling rules are also monitored by CloudWatch
    Monitoring mertics includes statistics like -- caching, latency, detected errors
    method level metrics can be monitored
    cloudWatch alarms can be setup based on these metrics

API gatewat addition configuration options or features -->
  --> API custom authorizer can be used to create authorizer for each of the different stages, but this wouldn't help in differentiaing the environment.
  --> Addition of model and schema to API can be done to add schema to your API and not to your stages of same API
  --> allow to configure integration responses to the API gateway

Controlling Access to an API in API Gateway -->
  --> Resource Policies
  --> IAM roles and policies
  --> CORS --> controls API response to cross-domain resource requests
  --> Lambda Authorizer (formerly known as custom authorizers)
  --> Amazon Cognito user pool 
  --> Client-side SSL certificates can be used to verify about HTTP requests that goes to API gateway
  --> API Keys -- Usage plans let you provide API keys to your customers â€” and then track and limit usage
  
  -------------------------
  On the other side -->
    --> Key policies are used to provide authorization for KMS keys
  
  

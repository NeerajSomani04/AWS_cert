EC2 Container Service (ECS) --> Server based service
  its a container managment service that supports Docker.
  ECS --> Runs and manages docker enabled application across a logical group of amazon EC2 instances.
      --> ECS keeps track of how many instances they have, where they are running, how many EC2 resources they are utilizing
      --> if there is a request from user to ECS to run for example, container image 1 and 2, ECS will find available EC2 instance in AWS to download those container images from Registry and run on available EC2 instances.
  containers --> that have everything your software needs including libraries, system tools, runtime engines, code.
   Docker --> A technology that packages software into standarized unit called containers. 
        --> Lets you quickly deploy and scale application into any environment and make sure your code will run properly.
  
  This container then can be delivered to any machine that can run docker and can run on that machine.
  This is used to create and manage a fleet of Docker container on a cluster of EC2 instances.

AWS ECS Cluster --> Logical group of EC2 instances that you can place container onto
  it can utilize on-demand, reserved or spot EC2 instances
  It can even include different EC2 instance types even from different regions
  EC2 instances are linked via VPC

ECS cluster can be created using any of below options --->
      --> AWS Console, --> CloudFormation, --> CLI, --> AWS ECS APIS
      
Purpose / Benefits --> 
  1. create distributed applications and microservices -->
    microservices --> create application architecture comprised of small independent task.
    example, seperate container for different component of application -->
      Webserver
      application server
      message queue
      backend servers
    This allows you to start, stop, manage, monitor, and scale each container independently.
    
    2. Batch and ETL jobs -->
      package batch and ETL jobs into container and deploy them into a shared EC2 clusters
      run different versions of the same job or multiple jobs on the same cluster
      share cluster capacity with other processes and/or grow jobs dynamically to improve resource utilization
  3. Continous Integration and Deployment -->
    By using Docker image versioning, its easy to use container for continous integration and deployment
    Build processes can Pull, Build, and create Docker images for your container

AWS Fargate --> is a way to use container as a fundamental application building block while AWS manages EC2 instances (same as Lambda)

Container Registry -->
  Its a repository where Container/Docker Images can be uploaded, stored and accessed when needed.
     Features -->
     --> fully managed Docker Container Registry
     --> Store, manage and deploy container images
     --> Integrated with AWS ECS
     --> Encrypted, Redundant and Highly-available
     --> Granualr security permission through AWS IAM

ECS Agent -->
    --> manages the state of container on a single EC2 instances 
    --> manages how ECS communicate with the Docker deamon on EC2 instances
    --> must be on every EC2 instance in your ECS cluster
    --> included with the ECS optimized AMI
    
  This runs on each EC2 instance in the ECS cluster, to communication information from EC2 to ECS, like running task, resource utilization, etc.
  ECS Agent also responsible for starting/stoping tasks when instructed by ECS.
 
Dockerfile -->
  A plain text file (script) that contains details (/instructions) about components that should be included in container

Docker Images --> point in time capture of code and dependencies
  This is build from Dockerfile, it contains all the downloaded/installed softwares, libraries, code, runtime info, etc specified in Dockerfile. (means, Dockerfile specifies instructions and DockerImage implements those instructions) 

Tasks --> Deploys containers onto ECS instances in your cluster based on task definition
  --> communicate with ECS Agent and Docker Deamon to run containers on eligible EC2 instances in cluster

Task Definition --> point in time capture of the configuration for running the image
    --> template for running one or more tasks
A JSON formatted text file that contains the "bluprint" of your application:
    --> Docker Image for each container
    --> CPU and Memory requirement for each container
    --> links between containers
    --> networking and port settings
    --> Data storage volume
    --> Security IAM roles

Services: 
  --> Manage long running workloads
  --> Automate the run-task process
  --> Actively monitor running tasks
  --> restart task if they fail 
 
Task Placement Stretagy --> defines how to distribute tasks on EC2 instance in cluster
    --> balance tasks for availability
    --> pack tasks for efficiency
    --> run only one tasks per EC2 instances
    --> custom tasks placements
  
  

      

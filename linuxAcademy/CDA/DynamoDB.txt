DynamoDB Overview -->
  Fully managed NoSQL DB
  consistent and fast performance
  easy to setup and communicate with
  optional encryption at rest

DynamoDB Pricing --> 
  provisioned throughput Writes (WCU - write capacity unit)
  Provisioned throughput Reads (RCU - Read capacity unit)
  Indexed data storage -- (secondary index)
  Other pricing factors --> 
    Resevred capacity, auto scaling, global tables, on-demand backup, on-demand restore, DynamoDB Accellerator (DAX), DynamoDB Streams

DynamoDB core concepts -->
  partition Key --> also known as HASH attribute, scalar in nature (means holds only one value), 
  sort key --> also known as Range attribute, not a required Key, scalar in nature, this is used to sort data in each partition
  primary key --> used to uniquely identify each item, must be of type string, number, or binary
    2 types --> simple primary key {only partition key}, composite primary key {partition key + sort key}
  Items --> group of attributes that can be uniquely indetifiable, (similar as row of RDBMS)
  attributes --> fundamental data element of dynamodb (same as individual column of RDBMS)
    data types supported --> 
      scalar type --> String, number, binary, boolean, null
      document type --> List, Map
      set --> number sets, string sets, binary sets

DynamoDb provision throughput --> Read and Write Capacity
  its maximum amount of capacity that application can consume, after that request are throttled
  throughput sets at table level, but split-up and consumed at partition level. Means, one partition can lack capacity but others are fine.
  Exam tips --> 
    seconds vs minutes vs hours - WCU and RCU are number of writes and reads per second. always calculate troughput per sec
    rounding --> round-up to nearest 1 KB (for WCU) and nearest 4 KB (for RCU)

DynamoDB Partitions --> partitions are SSD allocation of storage for tables, replicated across AZs.
  number of partition determines by provisioned capacity and storage size of partition
  
  Provisioned Capacity writes --> WCU consumed when creating, deleting, updating items. Writes always follow strong consistency.
    1 WCU = 1 write of item of size 1 KB or less per second
   example:- how many WCU needed for a table to have 120 writes per min for each item of size 2.5 KB
   Answer:- WCU = 120 item/min * 2.5 KB = 120 item/60 sec * 3 KB (nearest 1 KB) = 6 WCU
 
 Atomic Counters --> DynamoDB writes applied in the order received, if operation fails they can be retried. This brings a risk of updating item twice, possibly under or overcounting.
 Hence, conditional writes are introduced.
    Provisioned Capacity reads --> RCU are consumed with, GetItems, BatchGetItems, QUERY and SCAN operations
        1 RCU = 1 read of item of 4 KB or less per second (for strongly consistent reads)
        eventual consitent reads requires half of strongly consistent reads RCU
    example:- how many RCU needed to read 10 items of 13 KB per second for strongly consistent reads
    answer:- 10 item * 13 KB each = 10 item * (13 kb / 4 Kb per RCU) = 10 item * (3.25 RCU/item) = 10 item * (4 RCU/item) = 40 RCU
        but for eventual consistent reads this will be 20 RCU only.
  DynamoDB read operation --> 
      GetItem --> efficiently read a single item by providing item primary key
      BatchGetItem --> read upto 100 item, from one or more tables {each item is processed with GetItem operations only)
      Query --> read items with same partition key (and if provided sort key), all returned items considered as one read.
      SCAN --> reads all items of table, and consider the size of items that are evaluated, not the item size that got returned
   Eventual consistent --> doesn't guarantee most recent write 
   strong consistent --> guarantee to reflect most recent write 

DynamoDB Secondary Indexes --> 
  this allows efficient queries of non-primary key attributes
  every secondory index is associated with only one table, but one table can have multiple Secondary index
  Local Secondary Index --> gives the choice of Sort Key
    LSI primary-key are composite key {partition key + sort key}
    Each LSI can act as another sort key. 
    LSI consumes WCU and RCU from main tables capacity
    LSI must be created at the same time table is created. Can't create later.
  Global Secondary Index --> allows different partition and sort key, and can query the table in differnt ways
    Strongly consistent reads not possible with GSI
    GSI has their own WCU and RCU
    GSI can be created even after table creation

Common DynamoDB errors and limits --> 
  throttling exception --> when you try to create, delete or update tables too quickly
  ProvisionedThroughputExceedException --> if throughput on the table is insufficient
  ResourceNotFoundException --> incase accessing resource too early or not exist

DynamoDB Limits -->
  secondary indexes
  provisioned throughput
  number of tables
  items and attributes
  specific API limits
    
  
  
  
            
  
  


      
  

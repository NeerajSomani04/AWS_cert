DynamoDB Overview --> 
    1. Fully managed NoSQL DB --> 
          AWS auto scale compute resources for you based on setup
          customer need to manage data, not to worry about DB software/hardware
          provides built-in monitoring system
          schema-less, stores data in the form of key-value pair
    2. consistent and fast performance --> 
          fast SSD used in hardware, 
          control throughput using RCU/WRU, 
          replication on multi-AZ, 
          Global table allow replication across multi-region
    3. easy to setup and communicate with --> using AWS console/API/CLI/SDK, DynamoDB Stream advanced feature to use across AWS services
    4. optional encryption at rest
    5. Popular use-cases, example:- IOT (storing meta-data), Gaming info, mobile user session info, etc

DynamoDB Pricing --> below are main components to calculate pricing
  provisioned throughput Writes (WCU - write capacity unit) --> monthly rate per WCU
  Provisioned throughput Reads (RCU - Read capacity unit) --> monthly rate per RCU
  Indexed data storage -- (secondary index) --> hourly rate per GB of table data
  Other pricing factors --> (pricing differ based on region and over-time) and pricing are prorated based on hours
    Reserved capacity --> reserve WCU/RCU for fixed low price
    auto scaling, --> free, just pay for WCU/RCU
    global tables, --> (rWCU) in-case of global table replication, additional replication WCU
    on-demand backup, --> pay per GB month stored
    on-demand restore, --> pay per GB restored
    DynamoDB Accellerator (DAX), --> pay for the instances used per hour
    DynamoDB Streams --> pay per 100K reads

DynamoDB core concepts -->

DynamoDB Partitions --> DynamoDB stores data in partitions, partitions are SSD allocation of storage for tables, replicated across AZs.
       --> number of partition determines by provisioned capacity and storage size of partition
partition Key --> (required), also known as HASH attribute of item, scalar in nature (means holds only one value), 
sort key --> (not-required), also known as Range attribute, scalar in nature (holds only one value), used to sort data within partition
primary key --> uniquely identify each item to avoid duplicate rows, must be of type string, number, or binary
    2 types --> 
      simple primary key {only partition key} --> each item must have unique value for this attribute
      composite primary key {partition key + sort key} --> two item can have same partition key or sort key, but combination should be unique and such item are required to have both key.

Items --> group of attributes that can be uniquely indetifiable, (similar as row of RDBMS)
Attributes --> fundamental data element of dynamodb (same as individual column of RDBMS)
    data types supported --> 
      scalar type --> String, number, binary, boolean, null
      document type --> List, Map
      set --> number sets, string sets, binary sets

DynamoDb provision throughput --> measured in Read and Write Capacity unit
  its maximum amount of capacity that application can consume, after that request are throttled (canceled or stoped)
  throttled can be avoided by using DynamoDB auto scaling feature
  throughput sets at table level, but split-up and consumed at partition level. Means, one partition can lack capacity but others are fine. Hence, complete table will not suffer with performance only one partition with slight difference
Exam tips --> 
    seconds vs minutes vs hours - WCU and RCU are number of writes and reads per second. always round-up and calculate throughput per sec
    rounding --> round-up to nearest 1 KB (for WCU) and nearest 4 KB (for RCU)

Provisioned Capacity units --> 
1. Write Capacity Unit --> WCU consumed when creating, deleting, updating items. Writes always follow strong consistency.
   1 WCU = 1 write of item of size 1 KB (or less) per second
   example:- how many WCU needed for a table to have 120 writes per min for each item of size 2.5 KB
   Answer:- WCU = 120 item/min * 2.5 KB = 120 item/60 sec * 3 KB (nearest 1 KB) = 6 WCU
 
2. Read Capacity Unit --> RCU consumed when GetItem and BatchGetItem operation performed. Using the QUERY or SCAN opration
  RCU supports both strong consistency and Eventual Consistency -->
In-case of Strong Consistency --> 
   1 RCU = 1 read of 1 item of size 4 KB (or less) per second
   example:- how many RCU needed for a table to read 10 items each of 13KB to read per sec
   Answer:- RCU = 10 items * (13KB/ 4KB per RCU) = 10 items * (3.25KB per RCU) = 10 items * (4KB rounded to nearest 4KB per RCU) = 40 RCU
In-case of Eventually Consistency --> half of RCU will be needed compared to Strong Consistency

DynamoDB Read Operations -->
  GetItem --> read single item based on given primary key
  BatchGetItem --> can read upto 100 items from one or more table (each item read is done by GetItem operation, and RCU calculated)
  QUERY --> read item(s) with the same partition key value, (sort key if provided), 
      --> all returned items are treated as single read operation, and sum the size of all items and rounded to 4KB for RCU calculation
  SCAN --> 
  
  
Atomic Counters --> DynamoDB writes applied in the order received, if operation fails they can be retried. This brings a risk of updating item twice, possibly under or overcounting.
 Hence, conditional writes are introduced.
    Provisioned Capacity reads --> RCU are consumed with, GetItems, BatchGetItems, QUERY and SCAN operations
        1 RCU = 1 read of item of 4 KB or less per second (for strongly consistent reads)
        eventual consitent reads requires half of strongly consistent reads RCU
    example:- how many RCU needed to read 10 items of 13 KB per second for strongly consistent reads
    answer:- 10 item * 13 KB each = 10 item * (13 kb / 4 Kb per RCU) = 10 item * (3.25 RCU/item) = 10 item * (4 RCU/item) = 40 RCU
        but for eventual consistent reads this will be 20 RCU only.
  DynamoDB read operation --> 
      GetItem --> efficiently read a single item by providing item primary key
      BatchGetItem --> read upto 100 item, from one or more tables {each item is processed with GetItem operations only)
      Query --> read items with same partition key (and if provided sort key), all returned items considered as one read.
      SCAN --> reads all items of table, and consider the size of items that are evaluated, not the item size that got returned
   Eventual consistent --> doesn't guarantee most recent write 
   strong consistent --> guarantee to reflect most recent write 

DynamoDB Secondary Indexes --> 
  this allows efficient queries of non-primary key attributes
  every secondory index is associated with only one table, but one table can have multiple Secondary index
  Local Secondary Index --> gives the choice of Sort Key
    LSI primary-key are composite key {partition key + sort key}
    Each LSI can act as another sort key. 
    LSI consumes WCU and RCU from main tables capacity
    LSI must be created at the same time table is created. Can't create later.
  Global Secondary Index --> allows different partition and sort key, and can query the table in differnt ways
    Strongly consistent reads not possible with GSI
    GSI has their own WCU and RCU
    GSI can be created even after table creation

Common DynamoDB errors and limits --> 
  throttling exception --> when you try to create, delete or update tables too quickly
  ProvisionedThroughputExceedException --> if throughput on the table is insufficient
  ResourceNotFoundException --> incase accessing resource too early or not exist

DynamoDB Limits -->
  secondary indexes
  provisioned throughput
  number of tables
  items and attributes
  specific API limits
    
  
  
  
            
  
  


      
  

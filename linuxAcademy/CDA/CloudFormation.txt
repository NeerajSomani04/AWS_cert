CloudFormation Essentials --> (infrastructure as code)
  describe application architecture as JSON / YAML, used to deploy application architecture in any region, any account as per permission
  cloudFormation stacks --> defined by CloudFormation template, collection of AWS resources can be managed together as one unit

Benefit -->
  saves time, as same template configuration can be reuse in any region, account, 
  version control, as infrastructure became the code, easy to manage and configure even with different versions
  easy rollback if needed / backups
  can be easily prepare for even disaster recovery
  CloudFormation allows bootstraping scripts to install software while lauching cloud.

Cloud Formation Engines --> Create Stacks, update Stacks (change sets), Delete Stacks, Nested Stacks
Cloud Formation Designer --> WYSIWYG template designer, editor


CloudFormation Template --> JSON / YAML text file, describe AWS infrastructure (V-DM-PM-CTRO)
this template can have various optional sections, but "Resources" section is compulsory
  format version --> its the template version
  description --> a string that describes about template, its must follow format version
  metadata --> additional details that can help in implementation
  parameters --> values to pass to your template when create or update stack, (variables in template, User prompted for values to enter at run-time, example- key-pair, instance type, password values, etc)
  mapping --> match a provided key to a set of named values (lookup tables, AMIs by region)
  conditions --> (intrinsic functions) statements that determine when resources are created or properties are defined using logical operator (example, Env= prod, )
  Transform --> used to integrate with AWS serverless application model (AWS SAM)
  Resources --> AWS resources details and there properties
  Outputs --> output values that can be imported to other stacks, return in the response, or can be viewed at cloudFormation console
 
CloudFormation Resources -->
  resource type identifier --> AWS::aws-product-name::data-type-name
    example --> AWS::EC2::instance or AWS::DynamoDB::Table or AWS::IAM::Role
  each resource property vary by type -->
    AWS::EC2::instance --> can have AvailabilityZone or InstanceType as property
    AWS::IAM::Role --> can have ManagedPolicyArns
  some other resource attributes -->
    CreationPolicy -->(creation of stack based on some condition check) used to delay stack creation, can be based on other stack status
    DeletionPolicy --> (deletion of checks before actual delete) used to create a backup / snapshot before deleting any resource
    DependsOn --> used to specify resource dependency, if needed resources creation/deletion in specific order
    Metadata --> optional additional information about resources or stack 
    UpdatePolicy --> used to specify how to apply updates to AWS resources

CloudFormation Stacks --> groups of resources that can be managed together
  stacks are defined and managed by cloudFormation template
  in-case if AWS not able to create all mentioned resources of stack, it will rollback. 
      Hence, it will always be complete stack or nothing

CloudFomartion Intrinsic Functions --> 
  these are used to assign values to different cloudFormation properties that are available at or after runtime
  can be used in --> resources and output properties, or Metadata and UpdatePolicy attribute 
  common intrinsic functions -->
    Fn::GetAtt --> return the value of an attribute from a resource (example, used to get Name, ARN of resource)
    Fn::Join --> appends values into a single value seperated by a delimiter 
    Ref --> returns a value you can use to refer to provided parameter or resource
      example, Ref to EC2 instance would return instance ID (when you pass logicalID of EC2 instance)
              Ref to Lambda function would return function Name
    
 CloudFormation APIs --> https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/Welcome.html
  ListStackResources ---> returns description of all resources of the specified stack. (even for deleted stacks upto 90 days after the stack has been deleted)
    
    
    

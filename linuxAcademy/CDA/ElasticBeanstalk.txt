ElasticBeanstalk --> A service used to deploy single-tier (less complex) application without worry about provisioning of AWS resources.
  this is designed for people who have less knowledge of AWS but can utilize AWS super-power.
  Automated deployment and scaling services
  Environment for Web-applications and SQS worker instances -->
    --> load balancing, auto-scaling, monitoring, plateform managemnet, code deployment
    --> Programming languages --> JAVA, Python, Go, .Net, PHP, Node.js, Ruby
    --> servers --> Apache, Njinx, Passanger, IIS

Deployment Option --> https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.rolling-version-deploy.html
  1. all-at-once --> Deploy the new version to all instances simultaneously. All instances in your environment are out of service for a short time while the deployment occurs.
  2. Rolling (in-place) --> Deploy the new version in batches. Each batch is taken out of service during the deployment phase, reducing your environment's capacity by the number of instances in a batch.
  3. Rolling with additional batch --> Deploy the new version in batches, but first launch a new batch of instances to ensure full capacity during the deployment process.
  4. Immutable --> Deploy the new version to a fresh group of instances by performing an immutable update.
  5. Blue-Green --> all together seperate environment with seperate resources (instances), incase if issues in new env send traffic back to old env.

Batch size --> percentatge of EC2 instances that gets affected

when to use this -->
    --> if application fits within the parameter of BeanStalk service
    --> can deploy from repositories or from uploaded code files
    --> easily update application by uploading new code files or requesting a pull from repository

Few points -->
  --> ElasticBeanstalk allows to manage/set environment configuartion options in multiple ways -->
    --> using console --> while creating ElasticBeanstalk env 
    --> using CLI --> while creating ElasticBeanstalk env
    --> using saved configurations --> predefined saved configuartion at the enviornment / account level 
    --> using saved configuration files (.ebextension) --> at S3 level 
 --> if the same options is set at multiple locations then the value used is determined by order of precedence.
    --> below is order of precedence from higher to lower --> 
       1. --> settings applied directly to environments --> settings specified during creation or updation of environment using any method like AWS CLI, or EB CLI or SDK, or console. (applied and saved at environment configuration level)
       2. --> saved configurations --> settings that are applied directly at the time of creation are loaded from predefined saved configurations. (applied and saved at environment configuration level)
       3. --> configuration files (.ebextensions) --> this is a folder at the root of the application source bundle. any files under this folder are stored in alphabatical order (01, 02, a, b, etc) (not applied and saved directly at environment configuration level)
       4. Default values --> any other default value settings that are not specifed by other precedence level
        

ElasticBeanstalk --> A service used to deploy single-tier (less complex) application without worry about provisioning of AWS resources.
  this is designed for people who have less knowledge of AWS but can utilize AWS super-power.
  Automated deployment and scaling services
  *** An environment is tied to a specific deployable application version. means one environment can have only one application. but one application can be deployed to multiple environments.
  Environment for Web-applications and SQS worker instances -->
    --> load balancing, auto-scaling, monitoring, plateform managemnet, code deployment
    --> Programming languages --> JAVA, Python, Go, .Net, PHP, Node.js, Ruby
    --> servers --> Apache, Njinx, Passanger, IIS

Deployment Option --> https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.rolling-version-deploy.html
  1. all-at-once --> Deploy the new version to all instances simultaneously. All instances in your environment are out of service for a short time while the deployment occurs.
  2. Rolling (in-place) --> Deploy the new version in batches. Each batch is taken out of service during the deployment phase, reducing your environment's capacity by the number of instances in a batch.
  3. Rolling with additional batch --> Deploy the new version in batches, but first launch a new batch of instances to ensure full capacity during the deployment process.
  4. Immutable --> Deploy the new version to a fresh group of instances by performing an immutable update.
  5. Blue-Green --> all together seperate environment with seperate resources (instances), incase if issues in new env send traffic back to old env.

Batch size --> percentatge of EC2 instances that gets affected

when to use this -->
    --> if application fits within the parameter of BeanStalk service
    --> can deploy from repositories or from uploaded code files
    --> easily update application by uploading new code files or requesting a pull from repository

Few points -->
  --> ElasticBeanstalk allows to manage/set environment configuartion options in multiple ways -->
    --> using console --> while creating ElasticBeanstalk env 
    --> using CLI --> while creating ElasticBeanstalk env
    --> using saved configurations --> predefined saved configuartion at the enviornment / account level 
    --> using saved configuration files inside .ebextension folder or at S3 level
    
 --> if the same environment options is set at multiple locations then the value used is determined by order of precedence.
    --> below is order of precedence from higher to lower --> 
       1. --> settings applied directly to environments --> settings specified during creation or updation of environment using any method like AWS CLI, or EB CLI or SDK, or console. (applied and saved at environment configuration level)
       2. --> saved configurations --> settings that are applied directly at the time of creation are loaded from predefined saved configurations. (applied and saved at environment configuration level)
       3. --> configuration files (.ebextensions) --> this is a folder at the root of the application source bundle. any files under this folder are stored in alphabatical order (01, 02, a, b, etc) (not applied and saved directly at environment configuration level)
       4. Default values --> any other default value settings that are not specifed by other precedence level
        
Few Notes -->
  --> Inorder to deploy a custom application on EB where there is a need for lots of configuration files and patches needs to be downloaded, then use of custom AMI is recommended. This will improve provisioning time for your environment.
  --> Using configuration files is great for configuring and customizing your environment quickly and consistently. 

Elastic BeanStalk Integration with RDS -->
    --> you can connect and configure to DB instance directly to your environment or create DB externally and connect in EB environment.
    --> Creating RDS externally and connecting that in your EB will help you to retain it even after your you tear down your env.
    --> Also, Ensure you configure retention of your RDS DB marked as "Create SnapShot". This will keep a copy of your RDS even after your EB env tear down.

Deployment planning for Elastic BeanStalk -->
Create an Application Source Bundle and Your source bundle must meet the following requirements:
    Consist of a single ZIP file or WAR file (you can include multiple WAR files inside your ZIP file)
    Not exceed 512 MB
    Not include a parent folder or top-level directory (subdirectories are fine)
    If you want to deploy a worker application that processes periodic background tasks, must also include a cron.yaml file

Auto Scaling Group for Your AWS Elastic Beanstalk Environment -->
  --> Elastic Beanstalk includes an Auto Scaling group that manages the Amazon EC2 instances in your environment.
  --> Auto Scaling group also manages the launch configuration for the instances in your environment.  
---------->  Apart from this A YAML formatted environment manifest can also be placed in the root source bundle to configure the environment.

Managing Application Versions -->
    --> Elastic Beanstalk creates an application version whenever you upload source code. This is created when you upload using consol or EB CLI. Hence, you can upload multiple versions to EB environment and all can work in parallel.
    --> deletes these application versions according to the application's lifecycle policy and when you delete the application. 

Updating Your Elastic Beanstalk Environment's Platform Version --> 
    1. --> Updating an Environment's Platform Configuration (means, lateast or previous version of Docker)
          --> Navigate using AWS console and select the Docker plateform version as per need and save the changes
    2. Migrating an Environment to a New Configuration (means, lateast programing language version, example java 7 to java 8)
          --> you need to create a new environment using latest verion and deploy your code to this env
          --> EB doesn't support direct upgrade of language versions (like, PHP application from version 7.0 to version 7.1. Or move your Java with Tomcat application, from Java 7 with Tomcat 7 to Java 8 with Tomcat 8.5)
          --> To route users to your environment, Elastic Beanstalk registers a CNAME record that points to your environment's load balancer. 
          --> You can change the CNAME on your environment by swapping it with the CNAME of another environment.
          
What is CNAME records? (- Cannonical Name ) --> 
  --> CNAME stands for Canonical Name. CNAME records can be used to alias (or point) one name to another.
    for example:- you have a URL to access your docs online at docs.example.com but if someone wants to access it using documents.example.com, you create a CNAME record to point these URL to each other.

Differences between the A, CNAME, ALIAS and URL records --> 
  Hereâ€™s the main differences:
The A record maps a name to one or more IP addresses, when the IP are known and stable.
The CNAME record maps a name to another name. It should only be used when there are no other records on that name.
The ALIAS record maps a name to another name, but in turns it can coexist with other records on that name.
The URL record redirects the name to the target name using the HTTP 301 status code.

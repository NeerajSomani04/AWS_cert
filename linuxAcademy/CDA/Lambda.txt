Lambda Essentials -->
  Serverless computing platform --> means run code without provisioning or managing servers
  Lambda allows you to configure the amount of resources (memory, CPU) available to user function
  pay only for compute time code consume, in millisec
  by default Lambda is, highly available, scalable, fault tolerant, cost effective, elastic
  Lambda Functions and Lambda function packages are core concept for programming applications based on Lambda
  Lambda easily integrates with other AWS services
  Lambda supported languages --> Node.js, JAVA, C#, Python, GO
  --> Environment variables can be set to point different services in lambda
  --> tagging is helpful to add meta-data of your function in the logs
  
Lambda Events -->
  Lambda functions are triggered by events. example, like S3 file upload, DynamoDB changes, cloudWatch scheduled events, etc.

Lambda Functions --> consists of nothing but application code and dependent libraries, packages
  lambda functions can invokes as: --> using Invoke API call, using below Invocation type
    Synchronous : wait for return value and return it
    Asynchronous: Don't wait for return value, discard it
 Note:- When Lambda function triggered from an event, the type of invocation is determined by the service invoking the function.
 
Lambda Function Configuration -->
  Lambda requires significatly less configuration and managment, but you can still customize it:
    --> different programming language options and runtime environments
    --> the handler (each function has a handler file and function, format of the lambda handler value is filename.functioname) 
    --> Memory (128 MB to 3008 MB) - {in 64MB increment each time}. (default it 128 MB)
    --> CPU allocation sclaes based on memory
    --> max execution duration (300 sec) - in 1 sec increments. (default is 3 sec)
    --> permissions (Through IAM roles, or resource based access control policies, these policies needs to be set through CLI/SDK, can't be done through consol and it uses STS/Cognito for security)
    --> ** Environment Variables (in form of key-value pair to set environment at runtime env (dev, stage, prod), can be encrypted using kMS)
    --> we can configure SQS or SNS to get details about function failure
    --> concurrency --> we can specify the max no of concurrent execution of function (limit 1000)
    --> Tags - can be attached to function
 
 Lambda Function Packages --> zip package file include code and any dependencies
  --> handler file, custom or third party packages
      
Lambda Versions and Aliases --> used to manage code for production vs other environment (dev/qa) for different releases
  1. versions --> each version of function stored with unique ARN
    $LATEST --> this represents latest lambda function version, rest all with version number and this is the only mutable (changable version)
    Numbered Version (like 1 or 2) --> these are immutable, start with number 1 and increment by 1
  2. Aliases --> are pointer to specific lambda function version
       Alias can be used to call specific function without knowing version of function
       Alias have static ARN and can be used to point to any version of the same function
       Alias can also be used to split traffic between lambda functions versions, by configuring routing-config parameter 
  Benefits of both --> easier development workflow and management of stages.

Traffic Shifting Using Aliases --> 
    By default, an alias points to a single Lambda function version. 
    You can point an alias to a maximum of two Lambda function versions. by configuring routing-config parameter and dictate what percentage of incoming traffic is sent to each version.
few additional points to keep in mind -->
    Both versions should have the same Dead Letter Queues configuration (or no DLQ configuration).
    Both versions should have the same IAM execution role.
    When pointing an alias to more than one version, the alias cannot point to $LATEST.

Lambda API actions --> need to visit on AWS website if needed.
  AddPermission --> add permission to AWS resource
  CreateFunction --> create new lambda function
  Invoke --> this invokes the needed lambda function, with Invocation Type (Event (Asynchronous) or RequestResponse (default and used for Synchronous))
  CreateEventSourceMapping --> this identifies a stream as an event source for a lambda function. This association between a stream source and a lambda function is called the event source mapping. (example, lambda function will be triggered when records are posted to the stream)

When to use Lambda over EC2 --> Generally when you want to run code in response to an event -->
example:- change to S3 bucket, updates to DynamoDB table, Kinesis Stream, SQS queue

Q:-- What Configuration information needed for Lambda Function to Access Resources in an Amazon VPC
Answer:- VPC subnet IDs and security group IDs. 

example --> 
The create-function CLI command specifies the --vpc-config parameter to provide VPC information at the time you create a Lambda function.
$ aws lambda create-function \
--function-name ExampleFunction \
--runtime go1.x \
--role execution-role-arn \
--zip-file fileb://path/app.zip \
--handler app.handler \
--vpc-config SubnetIds=comma-separated-vpc-subnet-ids,SecurityGroupIds=comma-separated-security-group-ids \
--memory-size 1024

  ----- Need to work on Lambda function lab again -----
 
 Lambda Best practice notes --> https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html
     divided in 5 parts, Topics
            Function Code
            Function Configuration
            Alarming and Metrics
            Stream Event Invokes
            Async Invokes
            Lambda VPC
 
 function code -->
    --> Separate the Lambda handler (entry point) from your core logic. This allows you to make a more unit-testable function.
    --> Take advantage of Execution Context reuse to improve the performance of your function. Make sure any externalized configuration or dependencies that your code retrieves are stored and referenced locally after initial execution. Keep alive and reuse connections (HTTP, database, etc.) that were established during a previous invocation.
    --> Use Environment Variables to pass operational parameters to your function.
    --> Control the dependencies in your function's deployment package. means, include any needed dependencies in package instead of auto-install updates of those packages, as it can change the behaviour of your code.
    --> Minimize your deployment package size to its runtime necessities. Selectively only include the libraries that are required.
    --> Reduce the time it takes Lambda to unpack deployment packages authored in Java by putting your dependency .jar files in a separate /lib directory. This is faster than putting all your functionâ€™s code in a single jar with a large number of .class files.
    --> Minimize the complexity of your dependencies. Prefer simpler frameworks that load quickly on Execution Context startup.
    --> Avoid using recursive code in your lambda function. your function should have some conditional checks to avoid infinite loops. In-case of some accidental recursive code, set the function concurrent execution limit to '0' (zero) to throttle all invocation to the function, and correct your code.
  
  Function Configuration -->
    --> Performance testing your Lambda function, The memory usage for your function is determined per-invoke and can be viewed in AWS CloudWatch Logs. By analyzing the Max Memory Used: field, you can determine if your function needs more memory or if you over-provisioned your function's memory size.
    --> Load test your Lambda function to determine an optimum timeout value. 
    --> Use most-restrictive permissions when setting IAM policies. 
    --> Be familiar with AWS Lambda Limits. Payload size, file descriptors and /tmp space are often overlooked when determining runtime resource limits.
    --> Delete Lambda functions that you are no longer using.
    --> If you are using Amazon Simple Queue Service, with your Lambda function, need to make sure about Queue message visibility Timeout and Lambda function execution time.
  
  Alarming and Matrics -->
Lambda monitoring and debugging --> 
  AWS Lambda automatically monitors Lambda functions on your behalf, reporting metrics through Amazon CloudWatch. 
  Lambda automatically tracks the number of requests, the latency per request, and requests in an error and publishes the associated CloudWatch metrics. 
  Lambda automatically integrates with Amazon CloudWatch Logs and pushes all logs from your code to a CloudWatch Logs group associated with a Lambda function (/aws/lambda/<function name>). 
  CloudWatch matrics will only give the rate at which the function is executing, but not help in debug the code.

for debugging the Lambda -->
  You can insert logging statements into your code to help you validate that your code is working as expected. 
  
  stream event Invokes --> 
    --> Test with different batch and record sizes
    --> Increase Kinesis stream processing throughput by adding shards. 
  
  Async Invokes --> Asynchronous Lambda function and its issues
    --> Create and use Dead Letter Queues to address and replay async function errors.
  
  Lambda in VPC -->
    --> Don't put your Lambda function in a VPC unless you have to.
    --> Lambda creates elastic network interfaces (ENIs) in your VPC to access your internal resources. ensure you have enough ENI capacity 
    --> Create dedicated Lambda subnets in your VPC:

Quiz Notes -->
  1. A Lambda deployment package contains: Lambda function packages or 'deployment packages' must include function code and all the dependencies required for the function to work. They do not need to include a binary for the language runtime.
  2. two arguments a Python Lambda handler function require: event, context
      The event data contains the request data passed into Lambda from the event that triggered it. The context object provides useful methods for interacting with the context of the current execution (for example, time remaining in the execution or the AWS request id)
  3. When referencing the remaining time left for a Lambda function to run within the function's code you would use: 
    answer: "The context object" will give you access to a method to get the remaining time left in function execution. For example, in Python this would return the remaining time in milliseconds: context.get_remaining_time_in_millis()
4. Logs for Lambda functions are actually stored and accessed in CloudWatch.
5. Lambda requires you to specifically allocate certain resources. Which of the following can you adjust directly yourself?
    answer: Execution timeout (max is 300 sec) and Memory
    
Question from Udemy --> 
You are using DynamoDB Streams and there are 10 shards configured.  What influences the concurrency of a Lambda Function that is configured to process streaming data from DynamoDB?
Answer --> Number of shards per stream is the unit of concurrency. Example: 100 shards would trigger 100 lambda functions running concurrently. One lambda function processes events on a shard in the order that they arrive

***** For non-stream event sources, Each published event is a unit of work. Number of events dictate concurrency for lambda function.

*** Serverless deployment of your lambda function -->
  --> create YAML file with deployment specification and package them with code function file
  --> upload complete package on S3
  
to deploy using SAM (serverless Application Model) use below command --> 
sam deploy \
   --template-file serverless-output.yaml \
   --stack-name new-stack-name \
   --capabilities CAPABILITY_IAM

good features --> sigma scripts
14-may --> (am) --> IAM and EC2 , (pm) VPC
15-may --> (am) --> lambda, server based compute services , (pm) S3
16-may --> (am) --> S3 remaining and DynamoDB, (pm) other AWS DB services
17-may --> (am) --> SNS, SQS, SWF , (pm) step functions, API gateways
18-may --> all remaining
19-may --> revision
20-may --> exams

Access and Services layer --> how you create, access and manage aws account and its services.
Root User --> full account access. Not recommanded for daily use puporse. (email address and password)

Physical and Networking Layer --> all about how aws is organized and how internal and external communication with aws works.
where aws resources are physically located and how data flows around the world through aws network.
Regions, AZ, Edge Locations

Edge Location --> It's used to deliver content all over the world. ie. Cloudfront. example, used for caching objects, etc.
Regions --> Geographycal location, consist of multi AZ
AZ --> Data Centers, provides foudation for high availability and Fault tolerance. low latency network between AZs.

Shared Responsibility Model -->
  AWS Responsibility -->
  >> Physical server level and below
  >> physical env security and protection (firewall/power/climate/management)
  >> storage device decomissioning as per inductry standards
  >> personnel security
  >> Network Device security and ACL
  >> AWS API endpoints - SSL
  >> DDOS protection
  >> EC2 instances and spoofing protection (Ingress / Egress filtering)
  >> EC2 instances hypervisor isolation (instances on the same physical device are still independent, shared physical device between instances)
  
  Customer Responsibility -->
  >> IAM
  >> MFA
  >> Password/ Key Rotation
  >> Access Advisor
  >> Trusted Advisor
  >> security groups
  >> Resource based policies
  >> ACL
  >> VPC
  >> Port scanning is against the rules even on your own environment (ask AWS if needed)
  >> OS level patches

Some responsibility differs based on services -->
  AWS Lambda -->  Generally, OS patches are customer responsibilty
      Although, AWS Lambda is fully-managed service that lets AWS handle responsibility for OS operations.

AWS Compute Overview -->
  EC2 --> Virtual server based service
  Lambda --> Serverless based service
  ECS --> Elastic container based service
  Elastic BeanStalk --> PAAS

AWS Storage Overview -->
  S3 --> Object based stirage
  Glacier --> Archive object based storage
  DataBase services -->
    DynamoDB --> serverless NoSQL DB
    RDS --> mully-managed SQL DBs
    Elastic Cache --> In-memory Cache Engine
    Redshift --> PetaBytes managed DW

IAM    
IAM Essentials --> Global service, AWS access control service
  core components --> Users, groups, roles, policies, API Keys, password policy and MFA
  IAM provides access and access permission to AWS resources (like EC2, S3 etc)
  Best Practice --> always follow "Principle of Least Priviledge"

IAM Policies -->
  A policy is a document that formally states one or more permissions.
  By default, an explicit deny overrides an explicit allow.
  Few category:
    Admin Access: full access to AWS resource
    power user access: admin access but not allowed user/group management
    Read Only access: only view inside of AWS resource
  Policies can't directly be attached to AWS resources (Such as an EC2) 

IAM Users -->
  By Default, all IAM users has non-explicit deny policy means NO access to any AWS services.
  But if you attach allow access policy for any AWS services to a specific USER and also attach deny policy for any AWS services to the       same user, then this explicit deny policy always overrides explicit allow policy.
  Each user will receive unique access Key ID and Secrete access key (credentials), that must not be shared or pass to EC2 directly
IAM Groups -->
  multiple policies can be assigned to multiple users at a time
IAM Roles -->
  A role is something another entity can assume and acquires specific permissions defined by roles
  Here, entity mean AWS resources (such as EC2) or Non-AWS account holder who may need temp access to AWS (using AD, etc)
  role is better way to attach policy to AWS resources
    example:- an EC2 instnace requires access to S3 buckets
    

ARN (Amazon Resource Name) --> Is used to identify amazon resources across different region within an account.
  example --> arn:aws:iam::575876987:user/admin
  means --> arn:aws:service-name:region_name:account_number:aws_resource_type_name/user_name



  
  

??????? instance pricing (regional reserved, scheduled reserved, etc) ???????

EC2 Essentials --> (think of it as a basic desktop computer, with some advance capabilities)
  scalable virtual server on cloud, runs on Linux/Windows, 
  very similar as on-premises servers, with flexibility of on-demand commission and decommision for easy scalability and elasticity.
  These virtual servers known as "instance" and can be made up of different instance type and sizes.
  *** Specifying explicit credentials is not needed. EC2 instances can automatically assume the role assigned to it. You can get the temporary credentials with role specific privileges using metadataservice
  
  Components -->
    AMI --> OS, software packages, and other image settings  (preconfigured packages)
    Instance type --> hardware compute power, RAM, network bandwidth
    Network Interface --> public, private, elastic IP address
    instances storage --> "hard-drive"
      EBS (Elastic Block Storage) --> network persistent storage
      EFS (Elastic File storage) --> scalable, elastic file storage
      Instance storage --> "ephemeral storage" -- temporary / short time storage
 
 AMI Types -->
  1. Comunity AMI --> free to use, generally only OS selection available
  2. AWS Marketplace AMI --> Pay-to-Use, generally comes with additional packaged softwares.
  3. My personal AMI --> Customized AMI, that you create as per need, (OS, software packages, other preconfigured settings, etc)
 
 imp Facts --> 
  1. security groups must be assigned at time of creation
  2. Each instance must be placed into an existing VPC, AZ, and subnets
  3. custom launch command (bootstarping) can be passed at the launch
  4. "Tags" used to name and organize
  5. Encrypted Key-Pair used to login
  6. there is limit on number of instnaces running at specific time within a region

EC2 instnace types -->
  1. compute power optimized (processor/CPU) {C}, {P, G, F}
  2. memory optimized (RAM) {X, R}
  3. Storage Optimized (Hard-drive) {H, I, D}
  4. Network Performance (bandwidth)
  5. General purpose {T, M}

EC2 Purchasing Options -->
  On-Demand --> 
    choose, provision and terminate any instnaces type at any time
    most expensive, most flexible
    charged only for running time (billed as per seconds)
  Reserved Instances -->
    purchase for set time period (one or 3 year) with significant discount (pay upfront, partial upfront, no upfront)
    Regional RI and AZ specific RI
  Spot Instance -->
      bid for specific instance type, substantial discount, 
      you will get your spot instance when spot price is less or equal to bid price
      spot prices fluctuate based on supply & demand
      billing is done per second basis but spot prices are at per hour rate
      AWS terminate instance at anytime when spot price is greater then your bid price
  Dedicated Instnaces --> dedicated machine with full control, save money and works with specific regulatory compliance
  
EC2 Instance Configuration --> 
  IP Addresses -->
    Public --> Have option to enable/assign public IPs, used to access EC2 over the open internet, IPs assigned as per selected subnet
    Private --> By Default, all EC2 created with Private IPs, used for internal inside VPC communication
    Elastic --> Static but public IP address designed for dynamic cloud computing, 
      with EIP, you can attach an public IP to EC2 that was created with private IP
      attaching an EIP will replace default public IP, as long as EIP is attached.
   
   Bootstrapping --> set of independent commands run at the time of instnace launch
   User-Data --> custom commands can be used at time of launch for specific user (i.e, bash scripts)
   Below command to view user-data & meta-data  -->
      curl http://169.254.169.254/latest/user-data   (displays bootstrapping commands)
      curl http://169.254.169.254/latest/meta-data   (displays AMI, instance types, instance IP address etc)
 
 EC2 Storage Basics --> (API --> AttachVolume - used to attach EBS to EC2)
  EBS Basics --> EBS volumes are persistent, network attached storage (meaning attach/detach to/from EC2 instances)
      --> However, one EBS volumes can be attached to one instnace at a time
      --> SnapShots can be created from EBS, that can be used to create new EBS volume
      --> By default, EBS volumes replicated within AZ
      --> All EBS volumes gets initilized, first time a storage block is read
  EBS Performance -->
    EBS volumes measures in IOPS (means input/output operations per sec, in 256kb chunks, {512 kb operations = 2 IOPS})
  
  EBS Types -->
    Solid State Drive (SSD) or Hard Disk Drive (HDD)
    General Purpose SSD --> Used for dev/test env, smaller DB instance, Volume size (1 GB to 16 TB), performace 3 IOPS/GB
    Provisioned IOPS SSD --> used for critical applications/envs, High IOPS performance (upto 30000 IOPS per volume), perfoms at provision level, volume size (4GB to 16TB) 
    ThroughPut Optimized HDD and Cold HDD --> cheaper than SSD, less performant, Volume size 500GB to 16 TB, not bootable, (Cold HDD -- designed for less frequent access)
    EBS Magnetic (previous generation) --> low storage cost, 1GB to 1 TB, used for no performance impact envs
 
 EC2 instance Store volumes --> volume hardware physically attached to host machine, 
  used for ephemeral data, means (once the instnace stopped/shutdown, data is erased)
   Benefits --> when instance rebooted, still can maintain its ephemeral data
 
 EBS Snapshots --> point-in-time backup of EBS volumes stored on S3
  Snapshots properties -->
    snapshots are incremental in nature, means only stores the changes since the most recent snapshot, thus reduce cost
    However, if original snapshots are deleted, still data can be ratined from other snapshots. Because, even though snapshots charges you only for incremental data, all prior data is still there. Hence, fully restored EBS volume is possible.
    snapshots can degrade the performance, hence needs to be done in less load time, and should do frequently to increase data durability.

EBS Encryption --> mostly AWS-KMS -- CMK
Amazon EBS encryption uses AWS Key Management Service (AWS KMS) customer master keys (CMKs) when creating encrypted volumes and any snapshots created from them. A unique AWS-managed CMK is created for you automatically in each region where you store AWS assets. This key is used for Amazon EBS encryption unless you specify a customer-managed CMK that you created separately using AWS KMS.

EFS --> fully managed storage service, supports NFSv4 protocols, and 
  --> best performance with linux and not compatible with Windows OS
    scalable storage option:
    Elastic storage option: 
      --> storage capacity increase/decrease as you add or remove files 
      --> application will always have needed storage, unlike EBS, without having to worry about attach additional larger storage device
    Benefits of EFS -->
      --> multiple EC2 instances can connect to same EFS (centralized storage)
      --> EFS can be moutned to On-premises servers (connect through VPC via DirectConnect)
      --> highly scalable (in petabytes), with low latency and high throughput
      --> pay as you go benefit
    Security On EFS --> VPC for NACLs, IAM for API access control, encrypt data at-rest using AWS-KMS
    EFS is useful for Big Data, Analytics, Web-serving and content manament, media serving
    
EC2 Key-Pair -->
  Each Key-Pair consist of public key and private key. AWS stores public key at instance level and user save private key.
  user must save key-pair.pem file with chmod 400 permission.
  to login to EC2 instance user use this key-pair.pem file:- ssh ec2-user@public-ip -i key-pair.pem file.

ELB and Session state --> 
  Load Balancing --> means distributing incoming traffic across servers
  ELB can distribute incoming traffic across multiple EC2 instances across multiple AZs
  --> ELB provides access logs that capture detailed information about requests sent to your load balancer. 
  ELB maintain session state -->
    option 1 --> ELB generates cookies stickiness
    option 2 --> application generated cookies stickiness
    Non-ELB option --> Highly recommended, Use caching services like AWS ElasticCache
Types of ELB -->
  Classic Load balancer --> old but for http/https/tcp requests (No granular routing rules)
  Application Load Balancer ---> for http and https requests
        content based rules --> (setup on listener)
            Host-based rules --> route traffic based on the host field of HTTP header
            Path-based rules --> route traffic based on URL path of HTTP header
            --> this allows you to structure your application as small services
            --> even monitor and auto-scale based on traffic to "specific groups"
            --> can balance traffic to multiple ports
       --> ALB also supports ECS, EKS, HTTPs, HTTP/2, Web Socket, Access Logs, WAF, 
  Network load balancer --> for TCP requests (Reliability Pillar)
        --> NLB is designed for extreme performance. No need to scale to handle large traffic
        --> Layer 4 (TCP) load balancing
        --> Static / Elastic IP address per AZ
        --> IP addresses as Targets
        --> No SSL offloading

EC2 Shared Responsibility Model -->
  customer responsible for software level security on instnaces, using security groups, firewalls, EBS Encryption, apply SSL certificate to ELB
  AWS is responsible for Hypervisor and physical layer of security on instnaces, DDOS protection and port scanning protection.
      DDOS (Distributed Denial of Service) --> a malicious attempt to make a server or a network resource unavailable to legitimate users, by overloading it with massive amounts of fake traffic.
      
EC2 quiz notes -->
  1. data will be lost when you terminate EBS backed instance, but reboot or stop/start instance will keep your data on EBS volume.
  2. EFS --> easy scale up and down, and can connect to multiple EC2
  3. RegisterImage --> AWS API action call occurs during final process of creating AMI, for creating non-EBS backed instance from AMI
     need to know about below API actions
     CreateImage --> 
     ami-register-image -->
     ami-create-image --> 
  4. ".pem" key file must not be publically visible, it must be 400 permission.
  5. lauching an instance through AMI within same region where AMI exists.
  6. EBS-backed instnace can be stop/start without lossing data vs Instance-store backed Instance stop/start will loose data.
  7. ElastiCache --> When dealing with session state in EC2-based applications using Elastic load balancers
  8. DescribeImages --> used to describe an Amazon Machine Image
      
      
      

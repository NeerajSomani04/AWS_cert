SQS (Simple Queue Service) -->
  offers a reliable, highly-scalable, hosted queue for storing messages in transit between computers.
  helps you focus on building robust, sophisticated message-based applications, without worring about loosing any messages.
  user can build message based workflow process applications.

Amazon SQS different from Amazon SNS -->
   Amazon SNS allows applications to send time-critical messages to multiple subscribers through a “push” mechanism
   Amazon SQS is a message queue service used by distributed applications to exchange messages through a polling model, and can be used to decouple sending and receiving components

Example:- A common pattern is to use SNS to publish messages to Amazon SQS queues to reliably send messages to one or many system components asynchronously. 

Amazon SQS different from Amazon MQ -->
  If you're using messaging with existing applications, and want to move your messaging to the cloud quickly and easily, we recommend you consider Amazon MQ. 
  for any new cloud based application SQS and SNS are recommened.

message queuing ordering --> FIFO (first-in-first-out)
SQS, provide at-least-once delivery. FIFO queues provide exactly-once processing, message is delivered once and remains available until a consumer processes it and deletes it.
Duplicates not allowed.

SQS different from Amazon Kinesis Streams -->
  Use Amazon SQS when you need each unique message to be consumed only once and for below like use cases:
      Decoupling the components of an application
      Configuring individual message delay:
      Dynamically increasing concurrency or throughput at read time
      Scaling transparently
  Use Amazon Kinesis Streams when you need multiple consumers to be able to process each record and for below like use cases:
      Routing related records to the same record processor
      Allowing multiple applications to consume the same stream concurrently
 
 SQS Billing --> Pay only for what you use
    SQS is calculated by per request, plus data transfer charges for data transferred out of Amazon SQS (unless data is transferred to
      Amazon EC2 instances or to AWS Lambda functions within the same region)(means, no charges for SQS to EC2 or Lambda in same region).
    By grouping messages into batches (Batch operations), you can reduce your Amazon SQS costs.

Features, Functionality, and Interfaces -->
   
    Q: How does Amazon SQS handle unsuccessfully-processed messages?
    Answer: If you make a queue into a dead letter queue, it receives messages after a maximum number of processing attempts cannot be completed. You can use dead letter queues to isolate messages that can't be processed for later analysis.
    
    The visibility timeout is a period of time during which Amazon SQS prevents other consuming components from receiving and processing a message. maximum visibility timeout 12 hours.
    A message is not visible to any other reader for a designated amount of time when it is read from a message queue. Hence, multiple reader can process queue messages simultaneously.
    
    SQS support message metadata, up to 10 metadata attributes. Application can use this metadata to decide about the processing of queue messages.
    time-in-queue value can be calculated by, Subtracting SentTimestamp attribute from the current time results.
    
    When the AWS account ID is not available (for example, when an anonymous user sends a message), Amazon SQS provides the IP address.
    
    Two approach can be used to cost efficient SQS:-
    Short Polling (Pulling) --> short polling returns response immediately, either message is available in queue or not.
    Long Polling (Pulling) --> doesn’t return a response until a message arrives in the message queue, or the long poll times out
        By default, long-polling is 20 sec, but it can go to min 1 sec. (and max is 20 sec)
        
    Amazon SNS is designed such that each message is delivered at least once to Amazon SQS standard queues
    You can delete all messages in an Amazon SQS message queue without deleting the message queue itself.
 
 FIFO Queues -->    
 SQS supports both standard and FIFO queues.
 Standard Queues --> Unlimited Throughput, At-Least-Once Delivery, Best-Effort Ordering
 FIFO Queues --> High Throughput , Exactly-Once Processing, First-In-First-Out Delivery.
    FIFO throughput --> 3,000 messages per second with batching, or up to 300 messages per second without batching
 
 Q: Are the Amazon SQS queues I used previously changing to FIFO queues?
  Answer:- No. Amazon SQS standard queues (the new name for existing queues) remain unchanged, and you can still create standard queues. 

Important: You can't convert an existing standard queue into a FIFO queue. To make the move, you must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue.

  The following features of AWS services aren't currently compatible with FIFO queues:
      Amazon CloudWatch Events
      Amazon S3 Event Notifications
      Amazon SNS Topic Subscriptions
      Auto Scaling Lifecycle Hooks
      AWS IoT Rule Actions
      AWS Lambda Dead Letter Queues
  
  FIFO Queue Limitations -->
  >>  FIFO queues aren't currently compatible with the Amazon SQS Buffered Asynchronous Client.
  >> FIFO queues are compatible with the Amazon SQS Extended Client Library for Java and the Amazon SQS Java Message Service (JMS) client.
  >> SQS FIFO queues support multiple producers but not multiple consumers
 
 Security and Reliability --> 
    

Lambda -->
    Lambda lets you run code without provisioning or managing servers. (Zero administration on code)
    Lambda takes care of Auto scaling, high availability, etc. 
    Lambda makes it easy to execute code in response to events

Billing --> only for the time code is executing/running in environment and AWS resources used.

Serverless computing --> build and run applications and services without thinking about servers
                     --> server management is done by AWS.

Other services vs Lamda -->

Amazon EC2 --> for provisioning capacity, monitoring fleet health and performance, and designing for fault tolerance and scalability.
AWS Elastic Beanstalk --> offers an easy-to-use service for deploying and scaling web applications with full control over the underlying EC2 instances ownership. 
Amazon EC2 Container Service --> is a scalable management service that supports Docker containers and allows you to easily run distributed applications on a managed cluster of Amazon EC2 instances.

AWS Lambda makes it easy to execute code in response to events, with no worry about provisioning AWS resources as per your need.

Few Points to know about Lambda -->
    you can't access the infrastructure that AWS Lambda runs on. Thats for AWS management.
    Lambda stores code in Amazon S3 and encrypts it at rest.
    code must be written in a “stateless” style i.e. it should assume there is no relationship to the underlying compute infrastructure.
    Lambda’s programming model is stateless, but your code can access stateful data from web services.
    Lambda must be stateless, so that it can rapidly launch as many copies of the function as needed to scale
    normal programming language and operating system features are allowed, like threads, processes, etc.

 few activities that are disabled for Lambda -->
    Inbound network connections are blocked 
    for outbound connections only TCP/IP sockets are supported, TCP port 25 traffic is also blocked as an anti-spam measure. 
    ptrace (debugging) system calls are blocked. 

Q: How are compute resources assigned to an AWS Lambda function?
Answer --> Users are allowed to choose memory and based on that AWS assign compute power to Lambda.
        You can set your memory in 64MB increments from 128MB to 3GB.

AWS Lambda to process AWS events -->

    The default timeout for Lambda is 3 seconds, you can reset between 1 and 300 seconds.
    Lambda support versioning, Clients who make calls can call specific version or by default will get latest version.
    Events are passed to a Lambda function as an event input parameter. The event parameter may contain multiple events in a single             call, based on the batch size you request. This is for streaming events.
  
  The Amazon Kinesis and DynamoDB Streams records sent to your AWS Lambda function are strictly serialized, per shard.
    >> means if you put two records in the same shard, Lambda guarantees that your Lambda function will be successfully invoked with the            first record before it is invoked with the second record untill first records timeout.
    >> The ordering of records across different shards is not guaranteed, and processing of each shard happens in parallel.

You can deploy and manage your serverless applications using the AWS Serverless Application Model (AWS SAM), in the backend AWS 
    CloudFormation API helps to deploy serverless applications.
You can automate your serverless application’s release process using AWS CodePipeline and AWS CodeDeploy. 

You can invoke multiple Lambda functions sequentially, or in parallel. AWS Step Functions will maintain state during executions for you.

Lambda@Edge -->

Lambda@Edge allows you to run code across AWS locations globally, responding to end users at the lowest network latency.
In order to use this you need to configure your function to be triggered in response to Amazon CloudFront requests

Limitation --> Lambda@Edge only supports Node.js for global invocation by CloudFront events at this time.

Q: How is AWS Lambda@Edge different from using AWS Lambda behind Amazon API Gateway?
Answer:- 
The difference is that API Gateway and Lambda are regional services. Using Lambda@Edge and Amazon CloudFront allows you to execute logic across multiple AWS locations based on where your end viewers are located.





